package PIM.WEBSERIVE.ACTIVITIE.STUDENT.Model;
// default package
// Generated 22 �.�. 2561, 22:56:21 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", catalog = "panyapiway_student_activitie", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class Account implements java.io.Serializable {

	private Long id;
	private AccountType accountType;
	private Person person;
	private String username;
	private String password;
	private Date createDate;
	private Set<News> newses = new HashSet<News>(0);
	private Set<InfoActivitie> infoActivities = new HashSet<InfoActivitie>(0);
	private Set<Activitie> activities = new HashSet<Activitie>(0);
	private Set<MessageHasAccount> messageHasAccounts = new HashSet<MessageHasAccount>(0);
	private Set<Message> messages = new HashSet<Message>(0);
	private Set<InfoActivitieHasAccount> infoActivitieHasAccounts = new HashSet<InfoActivitieHasAccount>(0);

	public Account() {
	}

	public Account(AccountType accountType, Person person, String username, String password) {
		this.accountType = accountType;
		this.person = person;
		this.username = username;
		this.password = password;
	}

	public Account(AccountType accountType, Person person, String username, String password, Date createDate,
			Set<News> newses, Set<InfoActivitie> infoActivities, Set<Activitie> activities,
			Set<MessageHasAccount> messageHasAccounts, Set<Message> messages,
			Set<InfoActivitieHasAccount> infoActivitieHasAccounts) {
		this.accountType = accountType;
		this.person = person;
		this.username = username;
		this.password = password;
		this.createDate = createDate;
		this.newses = newses;
		this.infoActivities = infoActivities;
		this.activities = activities;
		this.messageHasAccounts = messageHasAccounts;
		this.messages = messages;
		this.infoActivitieHasAccounts = infoActivitieHasAccounts;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "account_type_id", nullable = false)
	public AccountType getAccountType() {
		return this.accountType;
	}

	public void setAccountType(AccountType accountType) {
		this.accountType = accountType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "person_id", nullable = false)
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@Column(name = "username", unique = true, nullable = false, length = 24)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 30)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", length = 19)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<News> getNewses() {
		return this.newses;
	}

	public void setNewses(Set<News> newses) {
		this.newses = newses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<InfoActivitie> getInfoActivities() {
		return this.infoActivities;
	}

	public void setInfoActivities(Set<InfoActivitie> infoActivities) {
		this.infoActivities = infoActivities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Activitie> getActivities() {
		return this.activities;
	}

	public void setActivities(Set<Activitie> activities) {
		this.activities = activities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<MessageHasAccount> getMessageHasAccounts() {
		return this.messageHasAccounts;
	}

	public void setMessageHasAccounts(Set<MessageHasAccount> messageHasAccounts) {
		this.messageHasAccounts = messageHasAccounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Message> getMessages() {
		return this.messages;
	}

	public void setMessages(Set<Message> messages) {
		this.messages = messages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<InfoActivitieHasAccount> getInfoActivitieHasAccounts() {
		return this.infoActivitieHasAccounts;
	}

	public void setInfoActivitieHasAccounts(Set<InfoActivitieHasAccount> infoActivitieHasAccounts) {
		this.infoActivitieHasAccounts = infoActivitieHasAccounts;
	}

}
